{"ast":null,"code":"import _classCallCheck from \"/home/ydw/Khan1121/test3/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ydw/Khan1121/test3/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ydw/Khan1121/test3/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ydw/Khan1121/test3/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ydw/Khan1121/test3/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ydw/Khan1121/test3/src/App.js\";\nimport React from 'react';\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport './App.css';\nimport Unity, { UnityContent } from \"react-unity-webgl\"; // 스캐터 사용하기 위해 객체 생성 및 옵션 설정\n\nScatterJS.plugins(new ScatterEOS());\nvar network = {\n  blockchain: 'eos',\n  protocol: 'https',\n  host: 'jungle2.cryptolions.io',\n  port: 443,\n  chainId: 'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473'\n};\nvar testnetserver = 'http://3.1.78.155/'; // 유니티 객체를 전역으로 설정\n\nvar unityContent = new UnityContent(\"./Build/TestBuild.json\", \"./Build/UnityLoader.js\", {\n  adjustOnWindowResize: true\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props)); // 유니티에서 실행 된 함수를 unityContent 객체로 받아서 실행\n\n    unityContent.on(\"SignUp\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          /*\n          eos.transaction({\n              actions:[\n                  {\n                      account : 'unlimitedmas',\n                      name : 'signup',\n                      authorization:[{\n                          actor : account.name,\n                          permission : account.authority\n                      }],\n                      data : {\n                          _user : account.name\n                      }\n                  }                  \n              ]\n          });  */\n\n          eos.transfer(account.name, 'unlimitedmas', '1.0000 EOS', 'signup').then(function (trx) {\n            console.log(\"Transaction ID: \".concat(trx.transaction_id));\n          }).catch(function (error) {\n            console.error(error);\n          });\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'signup';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result.body);\n            unityContent.send(\"PacketManager\", \"ResponseLogin\", data);\n          }).catch(function (error) {\n            console.error(error);\n          });\n        });\n      });\n    });\n    unityContent.on(\"Gacha\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          var transactionOptions = {\n            authorization: [\"\".concat(account.name, \"@\").concat(account.authority)]\n          }; // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'seed';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            console.log(result.body.seed);\n            console.log(result.body.num);\n            eos.transfer(account.name, 'unlimitedmas', '1.0000 EOS', 'gacha:' + result.body.num + ':' + result.body.seed, transactionOptions).then(function (trx) {\n              console.log(\"Transaction ID: \".concat(trx.transaction_id));\n            }).catch(function (error) {\n              console.error(error);\n            });\n          }).catch(function (error) {\n            console.error(error);\n          }); //\n          // POST Request\n\n          var gachaurl = testnetserver + 'gacha';\n          request.post(gachaurl).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            unityContent.send(\"PacketManager\", \"ResponseGacha\", data);\n            console.log(data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"Login\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions); // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'login';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            console.log(result.body);\n\n            if (result.body.signup == null) {\n              eos.transfer(account.name, 'unlimitedmas', '1.0000 EOS', 'signup').then(function (trx) {\n                console.log(\"Transaction ID: \".concat(trx.transaction_id));\n              }).catch(function (error) {\n                console.error(error);\n              });\n\n              var _url = testnetserver + 'signup';\n\n              request.post(_url).set('Content-Type', 'application/json').send({\n                user: account.name\n              }).then(function (result) {\n                var data = JSON.stringify(result.body);\n                console.log(result.body);\n                unityContent.send(\"PacketManager\", \"ResponseLogin\", data);\n              }).catch(function (error) {\n                console.error(error);\n              });\n            } else {\n              var u_data = {\n                servant_list: result.body.servant_list,\n                monster_list: result.body.monster_list,\n                item_list: result.body.monster_list,\n                token: result.body.token,\n                party_info: result.body.party_info,\n                userinfo: result.body.user_info\n              };\n              var data = JSON.stringify(u_data);\n              unityContent.send(\"PacketManager\", \"ResponseLogin\", data);\n            }\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"SetFormation\", function (data) {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          var value = JSON.parse(data);\n          eos.transaction({\n            actions: [{\n              account: 'unlimitedmas',\n              name: 'setparty',\n              authorization: [{\n                actor: account.name,\n                permission: account.authority\n              }],\n              data: {\n                _user: account.name,\n                _party_number: value.partyNum,\n                _servant_list: value.servantList,\n                _monster_list: value.monsterList\n              }\n            }]\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'setFormation';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name,\n            index: value.partyNum,\n            party: value.partyList\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(data);\n            unityContent.send(\"PacketManager\", \"ResponseGetParty\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetServant\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'getServant';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result);\n            unityContent.send(\"PacketManager\", \"ResponseGetAllServant\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetItem\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'getItem';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result);\n            unityContent.send(\"Packet\", \"TestReceive\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetMonster\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'getMonster';\n          request.post(url).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            console.log(result);\n            unityContent.send(\"PacketManager\", \"ResponseGetAllMonster\", data);\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"Logout\", function () {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        scatter.forgetIdentity();\n        unityContent.send(\"PacketManager\", \"ResponseGetAllMonster\", false);\n      });\n    });\n    unityContent.on(\"BattleAction\", function (data) {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          }); // POST Request\n\n          var request = require('superagent');\n\n          var url = testnetserver + 'seed';\n          var value = JSON.parse(data);\n          console.log('data' + data);\n          console.log('value' + value);\n          request.post(url).set('Content-Type', 'application/json').send().then(function (result) {\n            // POST Request\n            var url = testnetserver + 'battle';\n            request.post(url).set('Content-Type', 'application/json').send().then(function (result) {\n              var data = JSON.stringify(result);\n              unityContent.send(\"PacketManager\", \"ResponseBattleAction\", data);\n            }).catch(function (error) {\n              console.error(error);\n            }); // \n\n            var eosOptions = {\n              expireInSeconds: 60\n            };\n            var eos = scatter.eos(network, Eos, eosOptions);\n            eos.transaction({\n              actions: [{\n                account: 'unlimitedmas',\n                name: 'activeturn',\n                authorization: [{\n                  actor: account.name,\n                  permission: account.authority\n                }],\n                data: {\n                  _user: account.name,\n                  _hero_action: value.heroActionType,\n                  _monster_action: value.monsterActionType,\n                  _hero_target: value.heroTargetIndex,\n                  _monster_target: value.monsterTargetIndex,\n                  _seed: result.body.num + ':' + result.body.seed\n                }\n              }]\n            });\n          }).catch(function (error) {\n            console.error(error);\n          }); // \n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"StartBattle\", function (data) {\n      console.log('1:' + data);\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        console.log('2:' + data);\n        scatter.getIdentity(requiredFields).then(function () {\n          console.log('3:' + data);\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n\n          var request = require('superagent');\n\n          var value = JSON.parse(data);\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          console.log('4:' + data);\n          console.log('5:' + data);\n          console.log('1:' + value);\n          eos.transaction({\n            actions: [{\n              account: 'unlimitedmas',\n              name: 'startbattle',\n              authorization: [{\n                actor: account.name,\n                permission: account.authority\n              }],\n              data: {\n                _user: account.name,\n                _party_number: value.partyNum,\n                _stage: value.stageNum\n              }\n            }]\n          }); //unityContent.send(\"PacketManager\", \"ResponseStageStart\", data);\n\n          var gachaurl = testnetserver + 'battlestart';\n          request.post(gachaurl).set('Content-Type', 'application/json').send({\n            user: account.name\n          }).then(function (result) {\n            var data = JSON.stringify(result.body);\n            unityContent.send(\"PacketManager\", \"ResponseStageStart\", data);\n            console.log('data:' + data);\n          }).catch(function (error) {\n            console.error(error);\n          });\n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    unityContent.on(\"GetReward\", function (data) {\n      ScatterJS.scatter.connect('My-App').then(function (connected) {\n        if (!connected) return false;\n        var scatter = ScatterJS.scatter;\n        var requiredFields = {\n          accounts: [network]\n        };\n        scatter.getIdentity(requiredFields).then(function () {\n          var account = scatter.identity.accounts.find(function (x) {\n            return x.blockchain === 'eos';\n          });\n          var eosOptions = {\n            expireInSeconds: 60\n          };\n          var eos = scatter.eos(network, Eos, eosOptions);\n          eos.transaction({\n            actions: [{\n              account: 'unlimitedmas',\n              name: 'getreward',\n              authorization: [{\n                actor: account.name,\n                permission: account.authority\n              }],\n              data: {\n                _user: account.name\n              }\n            }]\n          });\n          unityContent.send(\"PacketManager\", \"ResponseStageResult\", data);\n        }).catch(function (error) {\n          console.error(error);\n        });\n      });\n    });\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 512\n        },\n        __self: this\n      }, React.createElement(Unity, {\n        unityContent: unityContent,\n        className: \"unityapp\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514\n        },\n        __self: this\n      }, \"hihihihihihi\"));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/home/ydw/Khan1121/test3/src/App.js"],"names":["React","ScatterJS","ScatterEOS","Eos","Unity","UnityContent","plugins","network","blockchain","protocol","host","port","chainId","testnetserver","unityContent","adjustOnWindowResize","App","props","on","scatter","connect","then","connected","requiredFields","accounts","getIdentity","account","identity","find","x","eosOptions","expireInSeconds","eos","transfer","name","trx","console","log","transaction_id","catch","error","request","require","url","post","set","send","user","result","data","JSON","stringify","body","transactionOptions","authorization","authority","seed","num","gachaurl","signup","u_data","servant_list","monster_list","item_list","token","party_info","userinfo","user_info","value","parse","transaction","actions","actor","permission","_user","_party_number","partyNum","_servant_list","servantList","_monster_list","monsterList","index","party","partyList","forgetIdentity","_hero_action","heroActionType","_monster_action","monsterActionType","_hero_target","heroTargetIndex","_monster_target","monsterTargetIndex","_seed","_stage","stageNum","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs';\nimport Eos from 'eosjs';\nimport './App.css';\nimport Unity, { UnityContent } from \"react-unity-webgl\";\n\n// 스캐터 사용하기 위해 객체 생성 및 옵션 설정\nScatterJS.plugins( new ScatterEOS() );\nconst network = {\n    blockchain:'eos',\n    protocol:'https',\n    host:'jungle2.cryptolions.io',\n    port:443,\n    chainId:'e70aaab8997e1dfce58fbfac80cbbb8fecec7b99cf982a9444273cbc64c41473'\n}\n\nconst testnetserver = 'http://3.1.78.155/'\n\n// 유니티 객체를 전역으로 설정\nlet unityContent = new UnityContent(\n    \"./Build/TestBuild.json\",\n    \"./Build/UnityLoader.js\",\n    {\n        adjustOnWindowResize: true\n    }\n  ); \n  \nclass App extends React.Component {\n    \n    constructor(props){\n        super(props);\n\n        // 유니티에서 실행 된 함수를 unityContent 객체로 받아서 실행\n        unityContent.on(\"SignUp\", function(){\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n                    /*\n                    eos.transaction({\n                        actions:[\n                            {\n                                account : 'unlimitedmas',\n                                name : 'signup',\n                                authorization:[{\n                                    actor : account.name,\n                                    permission : account.authority\n                                }],\n                                data : {\n                                    _user : account.name\n                                }\n                            }                  \n                        ]\n                    });  */\n\n\n                    eos.transfer(account.name, 'unlimitedmas', '1.0000 EOS', 'signup').then(trx => {\n                        console.log(`Transaction ID: ${trx.transaction_id}`);\n                    }).catch(error => {\n                        console.error(error);\n                    });\n                    \n\n                    const request = require('superagent');\n                    const url=testnetserver+'signup';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result.body);\n                        unityContent.send(\"PacketManager\", \"ResponseLogin\", data);\n                        \n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                });\n            });\n        });\n\n        unityContent.on(\"Gacha\", function(){\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n                    \n                    const transactionOptions = { authorization:[`${account.name}@${account.authority}`] };\n\n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'seed';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                            console.log(result.body.seed);\n                            console.log(result.body.num);\n                            eos.transfer(account.name, 'unlimitedmas', '1.0000 EOS', 'gacha:'+result.body.num+':'+result.body.seed, transactionOptions).then(trx => {\n                                console.log(`Transaction ID: ${trx.transaction_id}`);\n                            }).catch(error => {\n                                console.error(error);\n                            });\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    //\n                    // POST Request\n                    const gachaurl=testnetserver+'gacha';\n                    request.post(gachaurl)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                            const data = JSON.stringify(result.body);\n                            unityContent.send(\"PacketManager\", \"ResponseGacha\", data);\n                            console.log(data);\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"Login\", function(){\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n\n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'login';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        console.log(result.body);\n                        if(result.body.signup == null)\n                        {\n                            eos.transfer(account.name, 'unlimitedmas', '1.0000 EOS', 'signup').then(trx => {\n                                console.log(`Transaction ID: ${trx.transaction_id}`);\n                            }).catch(error => {\n                                console.error(error);\n                            });\n                            const url=testnetserver+'signup';\n                            request.post(url)\n                                 .set('Content-Type', 'application/json')\n                                 .send({user : account.name})\n                                 .then(result=>{\n                                 const data = JSON.stringify(result.body);\n                                 console.log(result.body);\n                                 unityContent.send(\"PacketManager\", \"ResponseLogin\", data);\n                        \n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                        }\n                        else\n                        {\n                            var u_data = {\n                                servant_list : result.body.servant_list,\n                                monster_list : result.body.monster_list,\n                                item_list : result.body.monster_list,\n                                token : result.body.token,\n                                party_info : result.body.party_info,\n                                userinfo : result.body.user_info\n\n                            }\n                            const data = JSON.stringify(u_data);\n                        unityContent.send(\"PacketManager\", \"ResponseLogin\", data);\n                        }\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"SetFormation\", data => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n                  \n                    const value = JSON.parse(data);\n                    eos.transaction({\n                        actions:[\n                            {\n                                account : 'unlimitedmas',\n                                name : 'setparty',\n                                authorization:[{\n                                    actor : account.name,\n                                    permission : account.authority\n                                }],\n                                data : {\n                                    _user : account.name,\n                                    _party_number : value.partyNum,\n                                    _servant_list : value.servantList,\n                                    _monster_list : value.monsterList\n                                }\n                            }\n                        ]\n                    });  \n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'setFormation';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({\n                            user : account.name,\n                            index: value.partyNum,\n                            party: value.partyList\n                        })\n                        .then(result=>{\n                            const data = JSON.stringify(result.body);\n                            console.log(data);\n                            unityContent.send(\"PacketManager\", \"ResponseGetParty\", data);\n                        \n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n\n\n        });\n        \n\n\n        unityContent.on(\"GetServant\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'getServant';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result);\n                        unityContent.send(\"PacketManager\", \"ResponseGetAllServant\", data);\n\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"GetItem\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'getItem';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result);\n                        unityContent.send(\"Packet\", \"TestReceive\", data);\n\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"GetMonster\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'getMonster';\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send({user : account.name})\n                        .then(result=>{\n                        const data = JSON.stringify(result.body);\n                        console.log(result);\n                        unityContent.send(\"PacketManager\", \"ResponseGetAllMonster\", data);\n\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n\n        unityContent.on(\"Logout\", () => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n               scatter.forgetIdentity();\n               unityContent.send(\"PacketManager\", \"ResponseGetAllMonster\", false);\n            });\n        });\n\n        unityContent.on(\"BattleAction\", data => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                   \n                    // POST Request\n                    const request = require('superagent');\n                    const url=testnetserver+'seed';\n                    const value = JSON.parse(data);\n                    console.log('data'+data);\n                    console.log('value'+value);\n                    request.post(url)\n                        .set('Content-Type', 'application/json')\n                        .send()\n                        .then(result=>{\n                            // POST Request\n                            const url=testnetserver+'battle';\n                            request.post(url)\n                            .set('Content-Type', 'application/json')\n                            .send()\n                            .then(result=>{\n                                const data = JSON.stringify(result);\n                                unityContent.send(\"PacketManager\", \"ResponseBattleAction\", data);\n                            }).catch(error=>{\n                                console.error(error);\n                            });\n                            // \n                            const eosOptions = { expireInSeconds:60 };\n                            const eos = scatter.eos(network, Eos, eosOptions);\n                            eos.transaction({\n                                actions:[\n                                    {\n                                        account : 'unlimitedmas',\n                                        name : 'activeturn',\n                                        authorization:[{\n                                            actor : account.name,\n                                            permission : account.authority\n                                        }],\n                                        data : {\n                                            _user : account.name,\n                                            _hero_action : value.heroActionType,\n                                            _monster_action : value.monsterActionType,\n                                            _hero_target : value.heroTargetIndex,\n                                            _monster_target : value.monsterTargetIndex,\n                                            _seed : result.body.num +':'+ result.body.seed\n                                        }\n                                    }                  \n                                ]\n                            });\n                    }).catch(error=>{\n                        console.error(error);\n                    });\n                    // \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n        unityContent.on(\"StartBattle\", data => {\n            console.log('1:' + data);\n\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if (!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts: [network] };\n                console.log('2:' + data);\n\n                scatter.getIdentity(requiredFields).then(() => {\n                    console.log('3:' + data);\n                    \n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const request = require('superagent');\n                    const value = JSON.parse(data);\n                    const eosOptions = { expireInSeconds: 60 };\n\n                    const eos = scatter.eos(network, Eos, eosOptions);\n                    console.log('4:'+data);\n                    \n                    console.log('5:'+data);\n\n                    console.log('1:'+value);\n                    eos.transaction({\n                        actions: [\n                            {\n                                account: 'unlimitedmas',\n                                name: 'startbattle',\n                                authorization: [{\n                                    actor: account.name,\n                                    permission: account.authority\n                                }],\n                                data: {\n                                    _user: account.name,\n                                    _party_number: value.partyNum,\n                                    _stage: value.stageNum\n                                }\n                            }\n                        ]\n                    });\n                    //unityContent.send(\"PacketManager\", \"ResponseStageStart\", data);\n\n                   \n                    const gachaurl = testnetserver + 'battlestart';\n                    request.post(gachaurl)\n                        .set('Content-Type', 'application/json')\n                        .send({ user: account.name })\n                        .then(result => {\n                            const data = JSON.stringify(result.body);\n                            unityContent.send(\"PacketManager\", \"ResponseStageStart\", data);\n                            console.log('data:'+data);\n                        }).catch(error => {\n                            console.error(error);\n                        });\n\n                }).catch(error => {\n                    console.error(error);\n                });\n\n            });\n        });\n        unityContent.on(\"GetReward\", data => {\n            ScatterJS.scatter.connect('My-App').then(connected => {\n                if(!connected) return false;\n                const scatter = ScatterJS.scatter;\n                const requiredFields = { accounts:[network] };\n                scatter.getIdentity(requiredFields).then(() => {\n                    const account = scatter.identity.accounts.find(x => x.blockchain === 'eos');\n                    const eosOptions = { expireInSeconds:60 };\n                    const eos = scatter.eos(network, Eos, eosOptions);\n\n                         eos.transaction({\n                                actions:[\n                                    {\n                                        account : 'unlimitedmas',\n                                        name : 'getreward',\n                                        authorization:[{\n                                            actor : account.name,\n                                            permission : account.authority\n                                        }],\n                                        data : {\n                                            _user : account.name,\n                                        }\n                                    }                  \n                                ]\n                            });\n                            \n                            unityContent.send(\"PacketManager\", \"ResponseStageResult\", data);\n    \n                }).catch(error => {\n                    console.error(error);\n                });   \n            });\n        });\n    }\n    \n    \n\n    render() {\n        return (\n            <div>\n            <Unity unityContent={unityContent} className = \"unityapp\"   />\n            <button>hihihihihihi</button>\n            </div>\n        );\n    }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}